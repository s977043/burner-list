あなたは「シニアフルスタックエンジニア兼UXデザイナー兼テックライター」です。  
以下の要件を満たす **動作する PoC リポジトリ一式** を、ファイルごとにコードブロックで出力してください。  
出力形式は「ファイルパス → 直後に内容をコードブロック」で、1ファイル＝1コードブロック。  
**推論過程や解説は不要**、成果物のみを返してください。

────────────────────────────────
■ プロダクト名  
Burner List (バーナーリスト) Webアプリ – PoC

■ コンセプト概要（必読）  
- Front Burner：最優先テーマ（1 枠・大カード）  
- Back Burner：次点テーマ（1 枠・中カード）  
- Kitchen Sink：その他すべて（無限リスト）  
- 1日 or 1週間ごとに Front/Back を見直し、未完了を Sink に自動降格できる  
- サブタスクの Done / Snooze（翌日 or 翌週へ持ち越し）をサポート  

■ 技術条件  
- Framework: **Next.js (App Router) + React + TypeScript**  
- State: **Zustand (+ persist)** – LocalStorage 永続化  
- UI: **Tailwind CSS**（Headless UI / Radix は任意）  
- Drag&Drop: dnd-kit（SSR でエラーにならない実装）  
- テスト: **Vitest + React Testing Library**（コア1〜2ケース）  
- PWA: manifest.json + 基本 service worker（インストール可能化のみ）  
- Lint/Format: ESLint + Prettier  
- 想定デプロイ先: Vercel（まずはローカル動作が最優先）

■ 機能要件（PoC）  
1. **3領域 UI**  
   - Desktop: 上段 Front/Back、下段 Kitchen Sink  
   - Mobile: 3タブ (Front / Back / Sink) + FAB「＋」  
2. **追加・編集・削除**  
   - Sink: クイック入力 → Enter で即追加  
   - Front/Back: サブタスク追加（1 階層のみ）  
3. **昇格 / 降格**  
   - Sink → Back → Front へ昇格（DnD またはメニュー）  
   - Front を入れ替えると既存 Front が Back へ自動降格  
4. **ステータス**  
   - open / done / snoozed（サブタスク）  
   - 完了チェックで打ち消し線 & 進捗インジケータ  
5. **セッション管理**（Daily / Weekly 切替可）  
   - 日付または週が変わるとロールオーバー モーダルを表示  
   - 未完了を Sink へ自動降格するオプション  
   - currentSession と history[] を LocalStorage に保存  
6. **使い勝手**  
   - キーボード: `f` = Front, `b` = Back, `/` = クイック入力フォーカス  
7. **設定**  
   - defaultPeriod: day|week  
   - autoDowngradeIncomplete: boolean  

■ 型定義（準拠）  
type BurnerSlotType = "front" | "back" | "sink";  
interface Subtask { id: string; content: string; status: "open" | "done"; }  
interface BurnerItem {  
  id: string; content: string;  
  status: "open" | "done" | "snoozed" | "dropped";  
  dueAt?: string; subtasks?: Subtask[];  
}  
interface BurnerSlot { type: BurnerSlotType; title?: string; notes?: string; items: BurnerItem[]; }  
interface SessionMeta { startedAt: string; periodType: "day" | "week"; label?: string; reflection?: string; }  
interface BurnerSession { id: string; meta: SessionMeta; front: BurnerSlot; back: BurnerSlot; sink: BurnerSlot; }  
interface AppState {  
  current: BurnerSession;  
  history: BurnerSession[];  
  settings: { defaultPeriod: "day" | "week"; autoDowngradeIncomplete: boolean; pushEnabled: boolean; };  
}

■ 必須ファイル例  
- /package.json, /tsconfig.json, /next.config.mjs, /tailwind.config.ts  
- /app/page.tsx（Desktop）, /app/m/page.tsx（Mobile）  
- /components/FrontCard.tsx, BackCard.tsx, SinkList.tsx, QuickAdd.tsx, RolloverDialog.tsx, SettingsSheet.tsx  
- /store/useBurnerStore.ts, /lib/rollover.ts  
- /public/manifest.json, /public/sw.js, /styles/globals.css  
- /tests/…（Vitest 最低1本）  
- /README.md（概要・セットアップ・開発コマンド・デプロイメモ・MVP TODO）

■ README に必ず含めること  
- プロジェクト概要（解決する課題）  
- セットアップ手順 (`pnpm install` 推奨)  
- 開発コマンド（dev / build / test / lint）  
- 設定項目と初期値  
- 今後の拡張 TODO（Sync, 通知, PWA 強化, Android ラップ）  

■ 受け入れ基準（最低）  
- `pnpm install && pnpm dev` でローカル起動し、Front/Back/Sink の追加・昇格・降格・完了が動く  
- LocalStorage にセッションと履歴が保存される  
- 日次/週次切替 & ロールオーバーダイアログが動く  
- Vitest が通る  
- PWA の manifest があり、インストールできる  

■ 出力フォーマット（超重要）  
1. ファイルごとに「/相対パス」→ 次行に```でコードブロック開始 → 内容 → ```で終了  
2. トークン上限に達する場合は、最後に **「次は /残りファイル一覧 を出力します」** と書いて区切ること  
3. 成果物以外の文章・解説は禁止  

─────  
まず、上記要件で不明点があれば **最大 5 つの確認質問** をまとめて提示し、  
回答後ただちにファイル出力を開始してください。  
─────